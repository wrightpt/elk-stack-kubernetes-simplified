# Define the service configuration for Traefik
service:
  type: LoadBalancer
  externalIPs:
    - 192.168.1.240
  ports:
    web:
      port: 80
      protocol: TCP
      # Node port is optional; Kubernetes manages it automatically for LoadBalancer services
      # nodePort: 31421
    websecure:
      port: 443
      protocol: TCP
      # nodePort: 30887

# Enable the Traefik dashboard for monitoring
dashboard:
  enabled: true
  # Optionally expose the dashboard externally via the LoadBalancer or Ingress
  # If you want it exposed, add a service port or IngressRoute
  # For now, keep it internal and access via kubectl port-forward

# Configure an IngressRoute for the dashboard (optional, if exposing externally)
ingressRoute:
  dashboard:
    enabled: true
    rule: "Host(`traefik.local`) && PathPrefix(`/dashboard`)"

# Enable Kubernetes providers
providers:
  kubernetesCRD:
    enabled: true
  kubernetesIngress:
    enabled: true

# TLS certificate resolver configuration for Letâ€™s Encrypt
additionalArguments:
  - "--certificatesresolvers.letsencrypt.acme.email=connect@3xmr.com"
  - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
  - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
  - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
  - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=30"
  - "--serverstransport.insecureskipverify=true"

# Persistent volumes for certificates
persistence:
  enabled: true
  name: letsencrypt
  accessMode: ReadWriteOnce
  size: 128Mi
  storageClass: "local-storage"
  path: /data

# Environment variables for secrets (ensure these exist in the traefik namespace)
env:
  - name: CF_API_TOKEN
    valueFrom:
      secretKeyRef:
        name: cloudflare-api-token
        key: CF_API_TOKEN

# Additional configuration (e.g., config.yml for routing)
additionalResources:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: traefik-config
      namespace: traefik
    data:
      config.yml: |
        http:
          routers:
            rpc:
              rule: "Host(`rpc.1xmr.com`)"
              entryPoints:
                - websecure
              service: rpc
              tls:
                certResolver: letsencrypt
            wallet:
              rule: "Host(`wallet.1xmr.com`)"
              entryPoints:
                - websecure
              service: wallet
              tls:
                certResolver: letsencrypt
            kibana:
              rule: "Host(`kibana.1xmr.com`)"
              entryPoints:
                - websecure
              service: kibana
              tls:
                certResolver: letsencrypt
            elasticsearch:
              rule: "Host(`elasticsearch.1xmr.com`)"
              entryPoints:
                - websecure
              service: elasticsearch
              tls:
                certResolver: letsencrypt
              middlewares:
                - es-auth
            logstash:
              rule: "Host(`logstash.1xmr.com`)"
              entryPoints:
                - websecure
              service: logstash
              tls:
                certResolver: letsencrypt
            traefik-dashboard:
              rule: "Host(`traefik.local`) && PathPrefix(`/dashboard`)"
              entryPoints:
                - websecure
              service: api@internal
              tls:
                certResolver: letsencrypt
          services:
            rpc:
              loadBalancer:
                servers:
                  - url: "http://rpc-service:18082"
                passHostHeader: true
            wallet:
              loadBalancer:
                servers:
                  - url: "http://wallet-service:18081"
                passHostHeader: true
            kibana:
              loadBalancer:
                servers:
                  - url: "http://kibana:5601"
                passHostHeader: true
            elasticsearch:
              loadBalancer:
                servers:
                  - url: "http://elasticsearch-master:9200"
                passHostHeader: true
            logstash:
              loadBalancer:
                servers:
                  - url: "http://logstash:5044"
                passHostHeader: true
          middlewares:
            es-auth:
              headers:
                customRequestHeaders:
                  Authorization: "Basic ${ES_AUTH_HEADER}"

# Logs for troubleshooting
logs:
  general:
    level: DEBUG
